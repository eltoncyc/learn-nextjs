{"ast":null,"code":"import { connectDatabase, getAllDocuments, insertDocument } from '../../../helpers/db-util';\n\nasync function handler(req, res) {\n  const eventId = req.query.eventId;\n  let client;\n\n  try {\n    client = await connectDatabase();\n  } catch (error) {\n    res.status(500).json({\n      message: 'Connecting to the datbase failed!'\n    });\n    return;\n  }\n\n  if (req.method === 'POST') {\n    const {\n      email,\n      name,\n      text\n    } = req.body; //add server side validation\n\n    if (!email.includes('@') || !name || name.trim() === '' || !text || text.trim() === '') {\n      res.status(422).json({\n        message: 'Invalid Input.'\n      });\n      return;\n    }\n\n    console.log(email, name, text);\n    const newComment = {\n      id: new Date().toISOString(),\n      email,\n      name,\n      text,\n      eventId\n    };\n    let result;\n\n    try {\n      result = await insertDocument(client, 'comments', newComment);\n    } catch (error) {\n      res.status(500).json({\n        message: 'Inserting comment failed!'\n      });\n      client.close();\n      return;\n    }\n\n    newComment._id = result.insertedId;\n    res.status(201).json({\n      message: 'Added comment.',\n      comment: newComment\n    });\n  }\n\n  if (req.method === 'GET') {\n    try {\n      const documents = await getAllDocuments(client, 'comments', {\n        _id: -1\n      });\n      res.status(200).json({\n        comments: documents\n      });\n    } catch (error) {\n      res.status(500).json({\n        message: 'Getting comments failed.'\n      });\n      client.close();\n      return;\n    }\n  }\n\n  client.close();\n}\n\nexport default handler;","map":{"version":3,"sources":["D:/Projects/learn-nextjs/events-api-app/pages/api/comments/[eventId].js"],"names":["connectDatabase","getAllDocuments","insertDocument","handler","req","res","eventId","query","client","error","status","json","message","method","email","name","text","body","includes","trim","console","log","newComment","id","Date","toISOString","result","close","_id","insertedId","comment","documents","comments"],"mappings":"AAAA,SAAQA,eAAR,EAAyBC,eAAzB,EAA0CC,cAA1C,QAA+D,0BAA/D;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAgC;AAG5B,QAAMC,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAUD,OAA1B;AACA,MAAIE,MAAJ;;AAEA,MAAG;AACCA,IAAAA,MAAM,GAAG,MAAMR,eAAe,EAA9B;AACH,GAFD,CAEC,OAAMS,KAAN,EAAY;AACTJ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB;AACA;AACH;;AAID,MAAGR,GAAG,CAACS,MAAJ,KAAa,MAAhB,EAAuB;AACnB,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAsBZ,GAAG,CAACa,IAAhC,CADmB,CAEnB;;AACA,QAAG,CAACH,KAAK,CAACI,QAAN,CAAe,GAAf,CAAD,IACA,CAACH,IADD,IACSA,IAAI,CAACI,IAAL,OAAc,EADvB,IAED,CAACH,IAFA,IAEMA,IAAI,CAACG,IAAL,OAAc,EAFvB,EAE0B;AACtBd,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAC;AAAT,OAArB;AACA;AACH;;AAEDQ,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAAmBC,IAAnB,EAAyBC,IAAzB;AACA,UAAMM,UAAU,GAAG;AACfC,MAAAA,EAAE,EAAC,IAAIC,IAAJ,GAAWC,WAAX,EADY;AAEfX,MAAAA,KAFe;AAGfC,MAAAA,IAHe;AAIfC,MAAAA,IAJe;AAKfV,MAAAA;AALe,KAAnB;AAOA,QAAIoB,MAAJ;;AACA,QAAG;AACCA,MAAAA,MAAM,GAAG,MAAMxB,cAAc,CAACM,MAAD,EAAS,UAAT,EAAqBc,UAArB,CAA7B;AACH,KAFD,CAEC,OAAMb,KAAN,EAAY;AACTJ,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAC;AAAT,OAArB;AACAJ,MAAAA,MAAM,CAACmB,KAAP;AACA;AACH;;AAEDL,IAAAA,UAAU,CAACM,GAAX,GAAiBF,MAAM,CAACG,UAAxB;AACAxB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAC,gBAAT;AAA0BkB,MAAAA,OAAO,EAACR;AAAlC,KAArB;AACH;;AAED,MAAGlB,GAAG,CAACS,MAAJ,KAAa,KAAhB,EAAsB;AAGlB,QAAG;AACC,YAAMkB,SAAS,GAAG,MAAM9B,eAAe,CAACO,MAAD,EAAS,UAAT,EAAqB;AAACoB,QAAAA,GAAG,EAAC,CAAC;AAAN,OAArB,CAAvC;AACAvB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACqB,QAAAA,QAAQ,EAACD;AAAV,OAArB;AACH,KAHD,CAGC,OAAMtB,KAAN,EAAY;AACTJ,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAC;AAAT,OAArB;AACAJ,MAAAA,MAAM,CAACmB,KAAP;AACA;AACH;AAGJ;;AAEDnB,EAAAA,MAAM,CAACmB,KAAP;AACH;;AAED,eAAexB,OAAf","sourcesContent":["import {connectDatabase, getAllDocuments, insertDocument} from '../../../helpers/db-util'\r\n\r\nasync function handler(req, res){\r\n\r\n\r\n    const eventId = req.query.eventId;\r\n    let client;\r\n\r\n    try{\r\n        client = await connectDatabase();\r\n    }catch(error){\r\n        res.status(500).json({message: 'Connecting to the datbase failed!'});\r\n        return;\r\n    }\r\n\r\n\r\n\r\n    if(req.method==='POST'){\r\n        const {email, name, text} = req.body;\r\n        //add server side validation\r\n        if(!email.includes('@')\r\n        || !name || name.trim()===''\r\n        ||!text||text.trim()===''){\r\n            res.status(422).json({message:'Invalid Input.'});\r\n            return;\r\n        }\r\n\r\n        console.log(email, name, text);\r\n        const newComment = {\r\n            id:new Date().toISOString(),\r\n            email,\r\n            name,\r\n            text,\r\n            eventId\r\n        }\r\n        let result;\r\n        try{\r\n            result = await insertDocument(client, 'comments', newComment);\r\n        }catch(error){\r\n            res.status(500).json({message:'Inserting comment failed!'});\r\n            client.close();\r\n            return;\r\n        }\r\n        \r\n        newComment._id = result.insertedId;\r\n        res.status(201).json({message:'Added comment.',comment:newComment});\r\n    }\r\n\r\n    if(req.method==='GET'){\r\n\r\n\r\n        try{\r\n            const documents = await getAllDocuments(client, 'comments', {_id:-1});\r\n            res.status(200).json({comments:documents});\r\n        }catch(error){\r\n            res.status(500).json({message:'Getting comments failed.'})\r\n            client.close();\r\n            return;\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    client.close();\r\n}\r\n\r\nexport default handler;"]},"metadata":{},"sourceType":"module"}