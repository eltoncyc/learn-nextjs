{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport function getPostData(fileName) {\n  const filePath = path.join(postsDirectory, fileName);\n  const fileContent = fs.readFileSync(filePath, 'utf-8');\n  const {\n    data,\n    content\n  } = matter(fileContent);\n  const postSlug = fileName.replace(/\\.md$/, ''); //removes the file extension\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n}\nexport function getAllPosts() {\n  const postFiles = fs.readdirSync(postsDirectory);\n  const allPosts = postFiles.map(postFile => {\n    return getPostData(postFile);\n  }); // for(const postFile of postFile){\n  //     const postData = getPostData(postFile);\n  // }\n\n  const sortedPosts = allPosts.sort((postA, postB) => postA.date > postB.date ? -1 : 1);\n  return sortedPosts;\n}\nexport function getFeaturedPosts() {\n  const allPosts = getAllPosts();\n  const featuredPosts = allPosts.filter(post => post.isFeatured);\n  return featuredPosts;\n}","map":{"version":3,"sources":["D:/Projects/learn-nextjs/next-blog-app/lib/posts-util.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPostData","fileName","filePath","fileContent","readFileSync","data","content","postSlug","replace","postData","slug","getAllPosts","postFiles","readdirSync","allPosts","map","postFile","sortedPosts","sort","postA","postB","date","getFeaturedPosts","featuredPosts","filter","post","isFeatured"],"mappings":";;;;;;AACA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA8B;AACjC,QAAMC,QAAQ,GAAGR,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BK,QAA1B,CAAjB;AACA,QAAME,WAAW,GAAGV,EAAE,CAACW,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB;AACA,QAAM;AAACG,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBX,MAAM,CAACQ,WAAD,CAA9B;AACA,QAAMI,QAAQ,GAAGN,QAAQ,CAACO,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAjB,CAJiC,CAIgB;;AACjD,QAAMC,QAAQ;AACVC,IAAAA,IAAI,EAACH;AADK,KAEPF,IAFO;AAGVC,IAAAA;AAHU,IAAd;;AAKA,SAAOG,QAAP;AACH;AAED,OAAO,SAASE,WAAT,GAAsB;AACzB,QAAMC,SAAS,GAAGnB,EAAE,CAACoB,WAAH,CAAejB,cAAf,CAAlB;AACA,QAAMkB,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAE;AACrC,WAAOhB,WAAW,CAACgB,QAAD,CAAlB;AACH,GAFgB,CAAjB,CAFyB,CAKzB;AACA;AACA;;AACA,QAAMC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAiBD,KAAK,CAACE,IAAN,GAAWD,KAAK,CAACC,IAAjB,GAAuB,CAAC,CAAxB,GAA0B,CAAzD,CAApB;AACA,SAAOJ,WAAP;AACH;AAED,OAAO,SAASK,gBAAT,GAA2B;AAC9B,QAAMR,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMY,aAAa,GAAGT,QAAQ,CAACU,MAAT,CAAgBC,IAAI,IAAEA,IAAI,CAACC,UAA3B,CAAtB;AACA,SAAOH,aAAP;AACH","sourcesContent":["\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nconst postsDirectory = path.join(process.cwd(), 'posts');\r\n\r\nexport function getPostData(fileName){\r\n    const filePath = path.join(postsDirectory, fileName);\r\n    const fileContent = fs.readFileSync(filePath, 'utf-8');\r\n    const {data, content} = matter(fileContent);\r\n    const postSlug = fileName.replace(/\\.md$/, '') ; //removes the file extension\r\n    const postData = {\r\n        slug:postSlug,\r\n        ...data,\r\n        content,\r\n    }\r\n    return postData;\r\n}\r\n\r\nexport function getAllPosts(){\r\n    const postFiles = fs.readdirSync(postsDirectory);\r\n    const allPosts = postFiles.map(postFile=>{\r\n        return getPostData(postFile);\r\n    })\r\n    // for(const postFile of postFile){\r\n    //     const postData = getPostData(postFile);\r\n    // }\r\n    const sortedPosts = allPosts.sort((postA, postB)=> postA.date>postB.date? -1:1);\r\n    return sortedPosts;\r\n}\r\n\r\nexport function getFeaturedPosts(){\r\n    const allPosts = getAllPosts();\r\n    const featuredPosts = allPosts.filter(post=>post.isFeatured);\r\n    return featuredPosts;\r\n}"]},"metadata":{},"sourceType":"module"}